syntax = "proto2";


message LookupSciper {
	required string sciper = 1;
}

// LookupSciperReply returns the elements of the vcard from
// https://people.epfl.ch/cgi-bin/people/vCard?id=sciper
message LookupSciperReply {
	required string fullName = 1;
	required string email = 2;
	required string url = 3;
	required string title = 4;
}

message Election {
    required string name = 1;
    required uint32 creator = 2;
    repeated uint32 users = 3 [packed=true];
    optional bytes id = 4;
    optional bytes master = 5;
    optional Roster roster = 6;
    optional bytes key = 7;
    optional bytes masterKey = 8;
    optional uint32 stage = 9;
    repeated uint32 candidates = 10 [packed=true];
    required int32 maxChoices = 11;
    required string subtitle = 12;
    required string moreInfo = 13;
    required sint64 start = 14;
    required sint64 end = 15;
    required string theme = 16;
    required Footer footer = 17;
}

message Footer {
  required string text = 1;
  required string contactTitle = 2;
  required string contactPhone = 3;
  required string contactEmail = 4;
}

message Ballot {
    required uint32 user = 1;
    required bytes alpha = 2;
    required bytes beta = 3;
    // optional bytes text = 4;
}

message Ping {
    required uint32 nonce = 1;
}

message Link {
    required string pin = 1;
    required Roster roster = 2;
    required bytes key = 3;
    repeated uint32 admins = 4;
}

message LinkReply {
    optional bytes master = 1;
}

message GetElections {
    required uint32 user = 1;
    required bytes master = 2;
    optional uint32 stage = 3;
}

message GetElectionsReply {
    repeated Election elections = 1;
}

message Open{
    required bytes id = 1;
    required Election election = 2;
    required uint32 user = 3;
    required bytes signature = 4;
}

message OpenReply {
    required bytes id = 1;
    required bytes key = 2;
}

message Cast {
    required bytes id = 1;
    required Ballot ballot = 2;
    required uint32 user = 3;
    required bytes signature = 4;
}

message CastReply {
    // required bytes block = 1;
}

message Shuffle {
    required string token = 1;
    required bytes id = 2;
    required uint32 user = 3;
    required bytes signature = 4;
}

message ShuffleReply {
}

message Decrypt {
    required bytes id = 1;
    required uint32 user = 2;
    required bytes signature = 3;
}

message DecryptReply {
}


message Reconstruct {
	required bytes id = 1;
}

// ReconstructReply message.
message ReconstructReply {
	repeated bytes points = 1;
}
